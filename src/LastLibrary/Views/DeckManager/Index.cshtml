@model LastLibrary.Models.DeckManagerViewModel.DeckModel
@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}

<h2>DeckModel Manager</h2>
    <div class="col-md-12">
        <div class="container-left col-md-6">
            <h1-custom>Search</h1-custom>
            <div id="cardSearchForm">
                <form class="card-search">
                    <div class="form-group">
                        <label for="cardName" id="cardNameLabel">Card Name</label>
                        <input type="text" placeholder="card name" id="cardName" class="input-big">
                    </div>

                    <label id="colourLabel">Colours</label>
                    <div class="form-group">
                        <label class="checkbox-inline">
                            <input type="checkbox" value="black" id="colourBlack"> Black
                        </label>
                        <label class="checkbox-inline">
                            <input type="checkbox" value="white" id="colourWhite"> White
                        </label>
                        <label class="checkbox-inline">
                            <input type="checkbox" value="blue" id="colourBlue"> Blue
                        </label>
                        <label class="checkbox-inline">
                            <input type="checkbox" value="green" id="colourGreen"> Green
                        </label>
                        <label class="checkbox-inline">
                            <input type="checkbox" value="red" id="colourRed"> Red
                        </label>
                    </div>

                    <div class="form-group">
                        <label for="power" if="powerLabel">Power</label>
                        <input type="text" placeholder="2" id="power" class="small-input">
                    </div>

                    <div class="form-group">
                        <label for="toughness" id="toughnessLabel">Toughness</label>
                        <input type="text" placeholder="2" id="toughness" class="small-input">
                    </div>

                    <div class="form-group">
                        <label for="mana" id="manaLabel">Converted Mana Cost</label>
                        <input type="text" placeholder="2" id="mana" class="small-input">
                    </div>


                    <label id="raritylabel">Card Rarity</label>
                    <select id="rarity">
                        <option value="Any" selected>Any</option>
                        <option value="Common">Common</option>
                        <option value="Uncommon">Uncommon</option>
                        <option value="Rare">Rare</option>
                        <option value="Mythic Rare">Mythic Rare</option>
                    </select>


                    <div class="submitButton">
                        <button id="cardSearchButton" class="btn btn-default">Search</button>
                    </div>

                </form>
            </div>
            <h1-custom>Your Deck</h1-custom>
           

        </div>
        <div class="container-right col-md-6">
            <h1-custom>Search Result</h1-custom>
            <div id="cardSearchResults" class="cardSearchResults"></div>

        </div>
    </div>

@section scripts{
    <script type="text/javascript">
        $(function() {
            //apply click handler to the submit button
            $("#cardSearchButton")
                .click(function(e) {
                    e.preventDefault();
                    requestCards(e);
                });

            //apply the enter key handler on the card name field
            $('#cardName')
                .on('keypress',
                    function(e) {
                        if (e.keyCode === 13) {
                            e.preventDefault();
                            requestCards(e);
                        }
                    });
        });

        function requestCards() {
            //get the card name
            var cardName = $("#cardName").val();

            //get the appropriate value for the rarity
            var rarity = $("#rarity").val();
            if (rarity.toUpperCase() === 'ANY') {
                rarity = null;
            }

            //create the request object
            var requestContent = {
                "isblue": $("#colourBlue").is(":checked"),
                "isRed": $("#colourRed").is(":checked"),
                "isGreen": $("#colourGreen").is(":checked"),
                "iswhite": $("#colourWhite").is(":checked"),
                "isblack": $("#colourBlack").is(":checked"),
                "power": $("#power").val(),
                "toughness": $("#toughness").val(),
                "cmc": $("#mana").val(),
                "rarity": rarity
            };

            //send the Ajax call to the server
            $.ajax({
                type: "POST",
                url: "api/card/" + cardName,
                contentType: 'application/json',
                data: JSON.stringify(requestContent),
                success: function (response) {
                    //remove the previous search results
                    var cardSearchResultsElement = $("#cardSearchResults");
                    cardSearchResultsElement.empty();

                    //create and append the response to the results area
                    response.cards.forEach(function (result) {
                        
                        //create the card element using the resulting card data
                        var cardElement = createCardElement(result);

                        //if we didn't get an element back, continue on to the next element
                        if (cardElement === null || cardElement === undefined) return;

                        //otherwise, append the card element to the results section
                        cardElement.appendTo(cardSearchResultsElement);
                    });
                }
            });
            return false;

        }

        /**
         * Function that creates DOM elements to display a magic the gathering card using the data passed into the function
         * 
         * @@param {object} cardData - The card data used to display a M:tG card
         * 
         * @@returns {element} - A DOM element that will contain the overall card element
         */
        function createCardElement(cardData) {
            //check to see if we get an image URL, if we don't, then don't bother displaying the card
            if (cardData.imageUrl === undefined || cardData.imageUrl === null) return null;

            //otherwise, create the card elements
            var containingDiv = $("<div />",
            {
                "class": "cardResult noSelect"
            });
            var image = $("<img />",
            {
                src: cardData.imageUrl,
                alt: cardData.name + " Image",
                "class": "card"
            });
            var plusIcon = $("<div />",
            {
                "class": "cardAddToResults"
            });

            //append the elements together
            image.appendTo(containingDiv);
            plusIcon.appendTo(containingDiv);

            //return the final result
            return containingDiv;
        }

    </script>
}