@using System.Globalization
@using System.Threading.Tasks
@model LastLibrary.Models.BrowseModels.DeckViewModel
@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewBag.Title = Model.Deck.DeckName;
    Layout = "_Layout";
}

<div class="headerPadding"></div>
<div class="col-md-12">
    <h1-custom>@Model.Deck.DeckName</h1-custom>
    <div class="lastLibrary-100-width lastLibrary-flex lastLibrary-flex--row lastLibrary-flex--justify-space-around">
        <p>
            Colours:
            @{
                var orderedColourSpread = Model.Deck.ColourSpread.OrderByDescending(el => el.Percentage).ToList();
                foreach (var colour in orderedColourSpread)
                {
                    if (string.Compare(colour.Colour, "red", StringComparison.CurrentCultureIgnoreCase) == 0)
                    {
                        <span class="mana small sr"></span>
                    }
                    else if (string.Compare(colour.Colour, "blue", StringComparison.CurrentCultureIgnoreCase) == 0)
                    {
                        <span class="mana small su"></span>
                    }
                    else if (string.Compare(colour.Colour, "black", StringComparison.CurrentCultureIgnoreCase) == 0)
                    {
                        <span class="mana small sb"></span>
                    }
                    else if (string.Compare(colour.Colour, "green", StringComparison.CurrentCultureIgnoreCase) == 0)
                    {
                        <span class="mana small sg"></span>
                    }
                    else if (string.Compare(colour.Colour, "white", StringComparison.CurrentCultureIgnoreCase) == 0)
                    {
                        <span class="mana small sw"></span>
                    }
                }
            }
        </p>
        <p>
            Creator: @Model.Deck.Creator
        </p>

        @if (!Model.Deck.IsPublic)
        {
            <p>
                Private Deck
            </p>
        }
        else
        {
            if ((Model.Deck.Ratings == null) || (Model.Deck.Ratings.Count == 0))
            {
                <p>Not Yet Rated</p>
                <p>Times Rated: 0</p>
            }
            else
            {
                <p>Rating: @Model.Deck.Ratings.Select(e => e.Rating).Average()/5</p>
                <p>Times Rated: @Model.Deck.Ratings.Count</p>
            }
        }
        <p>
            Posted: @Model.Deck.CreationDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)
        </p>
    </div>
    <div class="lastLibrary-100-width lastLibrary-flex lastLibrary-flex--justify-center">
        <p>
            <em>
                @Model.Deck.Description
            </em>
        </p>
    </div>
    @if (Model.IsCreator)
    {
        <div class="lastLibrary-100-width lastLibrary-flex lastLibrary-flex--justify-flex-end">
            <div class="col-md-3 lastLibrary-flex lastLibrary-flex--justify-space-around">
                <a asp-area="" asp-controller="DeckManager" asp-action="Edit" asp-route-id="@Model.DeckId">
                    Edit
                </a>
                <a href="#" onclick="deleteDeck(event, '@Model.DeckId')">
                    Delete
                </a>
            </div>
        </div>
    }
    else
    {
        <div class="lastLibrary-100-width lastLibrary-flex lastLibrary-flex--justify-flex-end">
            <label id="ratingLabel">Rating</label>
            <select id="ratingSelect">
                <option value="0">0</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5" selected>5</option>
            </select>
            <div class="submitButton">
                <button id="rateButton" class="btn btn-default customButton" onclick="rateDeck(event, '@Model.Deck.Id.ToString()')">Rate Deck</button>
            </div>
        </div>
    }
    <div class="margin-top-Medium lastLibrary-100-width lastLibrary-flex lastLibrary-flex--row lastLibrary-flex--justify-space-around lastLibrary-flex--wrap">
        @foreach (var card in Model.Deck.Cards)
        {
            <img class="margin-bottom-small" src="@card.Card.ImageUrl" alt="@card.Card.MultiverseId"/>
        }
    </div>

    <div>
        <div class="lastLibrary-flex lastLibrary-flex--column">
            @if ((Model.Deck.Comments != null) && (Model.Deck.Comments.Count > 0))
            {
                foreach (var comment in Model.Deck.Comments)
                {
                    <div class="lastLibrary-flex lastLibrary-flex--column">
                        <div class="lastLibrary-flex lastLibrary-flex--row lastLibrary-flex--justify-space-between">
                            <p>
                                @comment.Commenter
                            </p>
                            <p>
                                @comment.CommentDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)
                            </p>
                        </div>
                        <p>
                            @comment.Comment
                        </p>
                    </div>
                }
            }
        </div>
        @if (SignInManager.IsSignedIn(User))
        {
            <form class="addCommentGroup">
                <div class="form-group">
                    <label for="addComment" id="cardNameLabel">Comment</label>
                    <textarea rows="4" name="addComment" id="addComment" class="input-comment padding-small" placeholder="Write a comment..."></textarea>
                </div>
            </form>

            <div class="submitButton">
                <button id="commentSaveButton" class="btn btn-default customButton" onclick="saveComment('@Model.Deck.Id.ToString()')">Write Comment</button>
            </div>
        }
    </div>
</div>

@section scripts{
    <script type="text/javascript">

        /**
         * Function that initiated and handles a call to the back-end to save the user's comment
         */
        function saveComment(deckId) {
            //get the comment from the user
            var comment = $("#addComment").val();

            //make sure there is data in the comment
            if (comment === undefined || comment === null || comment.length === 0) return null;

            //create the object to send to the server
            var requestContent = {
                comment
            };

            //send the request to the server
            $.ajax({
                type: "POST",
                url: "/api/Deck/Comment/" + deckId,
                contentType: 'application/json',
                data: JSON.stringify(requestContent),
                success: function() {
                    $("#addComment").val("");
                    location.reload();
                },
                error: function() {
                    console.error("Unable to save deck");
                }
            });
            return false;
        }

        /**
         * Function that, when called, will send of an ajax call to the server to delete the
         * requested deck by the deck's ID
         *
         * @@param {string} deckId - The id of the deck to delete
         */
        function deleteDeck(e, deckId) {

            e.preventDefault();

            //make sure we got a deck ID to send to the server
            if (deckId === undefined || deckId === null) return false;

            //otherwise, make a call to the server to delete the deck
            $.ajax({
                type: "DELETE",
                url: "/api/Deck/" + deckId,
                success: function() {
                    //refresh the page to get the new data from the server
                    location.reload();
                },
                error: function() {
                    console.error("Unable to delete deck");
                }
            });
            return true;
        }

        /**
         * Function that, when called, will send of an ajax call to the server to rate the
         * current deck by ID
         *
         * @@param {string} deckId - The id of the deck to delete
         */
        function rateDeck(e, deckId) {

            e.preventDefault();

            //make sure we got a deck ID to send to the server
            if (deckId === undefined || deckId === null) return false;

            //create the object to send to the server
            var requestContent = {
                rating: $("#ratingSelect").val()
            };

            //otherwise, make a call to the server to delete the deck
            $.ajax({
                type: "POST",
                url: "/api/Deck/Rate/" + deckId,
                contentType: 'application/json',
                data: JSON.stringify(requestContent),
                success: function() {
                    //refresh the page to get the new data from the server
                    location.reload();
                },
                error: function() {
                    console.error("Unable to rate deck");
                }
            });
            return true;
        }
    </script>
}